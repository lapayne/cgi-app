name: Node.js CI

on:
  push:
    branches:
      - "*"
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - "*"

jobs:
  unit_test:
    runs-on: ubuntu-latest

    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Install dependencies
        run: npm i

      - name: Run tests (CRA + JUnit)
        run: |
          CI=true npm test -- --watchAll=false --i \
            --reporters=default --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT_DIR: test-results/jest
          JEST_JUNIT_OUTPUT_NAME: junit.xml

      - name: Publish Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/jest/junit.xml

  sonarqube_scan:
    needs: unit_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Disabling shallow clones is recommended for improving the relevancy of analysis
          fetch-depth: 0

      - name: sonarqube_scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        with:
          # Add the 'args' property to provide the necessary parameters
          args: >
            -Dsonar.projectKey=lapayne_cgi-app
            -Dsonar.sources=./src
            -Dsonar.organization=lapayne

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600

        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}

      # New Step: Fail the build if the quality gate is not 'OK'
      - name: Fail build on quality gate failure
        if: ${{ steps.quality-gate.outputs.quality-gate-status != 'PASSED' }}
        run: |
          echo "The Quality Gate status is ${{ steps.quality-gate.outputs.quality-gate-status }}""
          exit 1

  build_and_push_docker:
    needs: unit_test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract semver tag from Git ref
        id: get_tag
        run: echo "IMAGE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        if: startsWith(github.ref, 'refs/tags/')

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ steps.get_tag.outputs.IMAGE_TAG || 'beta' }}
            ghcr.io/${{ github.repository }}:sha-${{ github.sha }}
            ghcr.io/${{ github.repository }}:dev

  deploy_to_dev:
    needs: [build_and_push_docker, sonarqube_scan]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Checkout Terraform repository
        uses: actions/checkout@v4
        with:
          repository: lapayne/cgi-tf
          path: terraform
          token: ${{ secrets.PAT_FOR_TERRAFORM_REPO }}

      - name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.3"

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="prefix=dev"
        working-directory: ./terraform

      - name: Terraform Apply
        id: apply
        run: terraform apply --auto-approve --var-file=dev.tfvars
        working-directory: ./terraform

  run_e2e_tests:
    needs: deploy_to_dev
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and run container
        run: |
          docker pull ghcr.io/lapayne/cgi-test:beta
          docker run  -e SITE_URL=${{ vars.SITE_URL }} ghcr.io/lapayne/cgi-test:beta
